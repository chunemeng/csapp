#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 522031910118 滕昊益
# Describe how and why you modified the baseline code.
#      进行8*8循环展开，然后对剩余部分分别进行4*4 2*2 1*1
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	xorq    %rax, %rax	# count = 0
checkf:
	iaddq   $-8, %rdx	# len >= 8
	jl    L60        # if not go to L60
L0:
        mrmovq (%rdi), %r11             # read val from src...
        mrmovq 8(%rdi), %r10    # read val from src...
        mrmovq 16(%rdi), %r9             # read val from src...
        mrmovq 24(%rdi), %r8    # read val from src...
        mrmovq 32(%rdi), %r12             # read val from src...
        mrmovq 40(%rdi), %r13    # read val from src...
        mrmovq 48(%rdi), %r14
        mrmovq 56(%rdi), %rbx
        rmmovq %r11, (%rsi)             # ...and store it to dst
        rmmovq %r10, 8(%rsi)    # ...and store it to dst
        rmmovq %r9, 16(%rsi)             # ...and store it to dst
        rmmovq %r8, 24(%rsi)    # ...and store it to dst
        rmmovq %r12, 32(%rsi)             # ...and store it to dst
        rmmovq %r13, 40(%rsi)    # ...and store it to dst
        rmmovq %r14, 48(%rsi)             # ...and store it to dst
        rmmovq %rbx, 56(%rsi)    # ...and store it to dst
	iaddq  $64, %rdi
        andq %r11, %r11         # val <= 0?
        jle AD0                # if so, goto next add
        iaddq $1, %rax
AD0:
	iaddq  $64, %rsi 
        andq %r10,%r10
        jle AD1               # if so, goto next ADD
        iaddq $1, %rax
AD1:
        andq %r9,%r9
        jle AD2               # if so, goto next ADD
        iaddq $1, %rax
AD2:
        andq %r8,%r8
        jle AD3                # if so, goto next L
        iaddq $1, %rax
AD3:
        andq %r12,%r12
        jle AD4                # if so, goto next L
        iaddq $1, %rax
AD4:
        andq %r13,%r13
        jle AD5                # if so, goto next L
        iaddq $1, %rax
AD5:
        andq %r14,%r14
        jle AD6                # if so, goto next L
        iaddq $1, %rax
AD6:
        andq %rbx,%rbx
        jle checke                # if so, goto next L
        iaddq $1, %rax
checke:
        iaddq   $-8, %rdx	# len > 8
	jge     L0	        # if not go to jump        
L60:
        iaddq  	$4, %rdx
        jl      L40
L66:
        mrmovq (%rdi), %r11             # read val from src...
        mrmovq 8(%rdi), %r10    # read val from src...
        mrmovq 16(%rdi), %r9             # read val from src...
        mrmovq 24(%rdi), %r8    # read val from src...
        rmmovq %r11, (%rsi)             # ...and store it to dst
        rmmovq %r10, 8(%rsi)    # ...and store it to dst
        rmmovq %r9, 16(%rsi)             # ...and store it to dst
        rmmovq %r8, 24(%rsi)    # ...and store it to dst
	iaddq  $32, %rdi
        andq %r11, %r11         # val <= 0?
        jle AD40                # if so, goto next add
        iaddq $1, %rax
AD40:
	iaddq  $32, %rsi 
        andq %r10,%r10
        jle AD41               # if so, goto next ADD
        iaddq $1, %rax
AD41:
        andq %r9,%r9
        jle AD42               # if so, goto next ADD
        iaddq $1, %rax
AD42:
        iaddq $-4,%rdx         # to catch lower case
        andq %r8,%r8
        jle L40                # if so, goto next L
        iaddq $1, %rax
L40:    
        iaddq $2,%rdx
        jl   BeforeOnce
Loop:	
	mrmovq (%rdi), %r11	# read val from src...
	mrmovq 8(%rdi), %r10	# read val from src...
	rmmovq %r11, (%rsi)	# ...and store it to dst
	rmmovq %r10, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle ADD1		# if so, goto Npos:
	iaddq $1, %rax
ADD1:
	andq %r10,%r10
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax
Npos:
        iaddq $-2,%rdx
	iaddq $16, %rdi		# src+2
	iaddq $16, %rsi		# dst+2
BeforeOnce:
        iaddq $2,%rdx
        jg Once
        jmp Done
Once:
	mrmovq (%rdi), %r9	# read val from src...
	rmmovq %r9, (%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $1, %rax
	jmp Done

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
