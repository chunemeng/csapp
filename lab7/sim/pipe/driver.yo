                            | #######################################################################
                            | # Test for copying block of size 0;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20000000000000000 | 	irmovq $0, %rdx		# src and dst have 0 elements
0x014: 30f68802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 801001000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 522031910118 滕昊益
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 6222                 | 	andq %rdx,%rdx      # len <= 0
0x03f: 715100000000000000   | 	jle CheckLoop
0x048: 700f01000000000000   | 	jmp Done
0x051:                      | CheckLoop:
0x051: c0f2ffffffffffffffff | 	iaddq $-1,%rdx		# len > 1?
0x05b: 769600000000000000   | 	jg Loop		# if so, start Loop:
0x064:                      | Once:
0x064: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x06e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x078: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x07a: 71e800000000000000   | 	jle Npos		# if so, goto Npos:
0x083: c0f00100000000000000 | 	iaddq $1, %rax
0x08d: 700f01000000000000   | 	jmp Done
0x096:                      | Loop:	
0x096: 50b70000000000000000 | 	mrmovq (%rdi), %r11		# read val from src...
0x0a0: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x0aa: 40b60000000000000000 | 	rmmovq %r11, (%rsi)		# ...and store it to dst
0x0b4: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x0be: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0c0: 71d300000000000000   | 	jle ADD1:		# if so, goto Npos:
0x0c9: c0f00100000000000000 | 	iaddq $1, %rax
0x0d3:                      | ADD1:
0x0d3: 62aa                 | 	andq %r10,%r10
0x0d5: 71e800000000000000   | 	jle Npos:		# if so, goto Npos:
0x0de: c0f00100000000000000 | 	iaddq $1, %rax
0x0e8:                      | Npos:
0x0e8: c0f71000000000000000 | 	iaddq $16, %rdi		# src+2
0x0f2: c0f61000000000000000 | 	iaddq $16, %rsi		# dst+2
0x0fc: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x106: 765100000000000000   | 	jg CheckLoop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x10f:                      | Done:
0x10f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x110:                      | End:
                            | #/* $end ncopy-ys */
0x110:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x110:                      | check:
                            | 	# Return value test
0x110: 30fa0000000000000000 | 	irmovq $0,%r10
0x11a: 61a0                 | 	subq %r10,%rax
0x11c: 733801000000000000   | 	je checkb
0x125: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x12f: 707602000000000000   | 	jmp cdone
0x138:                      | checkb:
                            | 	# Code length check
0x138: 30f01001000000000000 | 	irmovq EndFun,%rax
0x142: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x14c: 6120                 | 	subq %rdx,%rax
0x14e: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x158: 6102                 | 	subq %rax,%rdx
0x15a: 757601000000000000   | 	jge checkm
0x163: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x16d: 707602000000000000   | 	jmp cdone
0x176:                      | checkm:
0x176: 30f28802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x180: 30f37802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x18a: 30f70000000000000000 | 	irmovq $0,%rdi  # Count
0x194: 6277                 | 	andq %rdi,%rdi
0x196: 73f401000000000000   | 	je checkpre         # Skip check if count = 0
0x19f:                      | mcloop:
0x19f: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x1a9: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x1b3: 6160                 | 	subq %rsi,%rax
0x1b5: 73d101000000000000   | 	je  mok
0x1be: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1c8: 707602000000000000   | 	jmp cdone
0x1d1:                      | mok:
0x1d1: 30f00800000000000000 | 	irmovq $8,%rax
0x1db: 6002                 | 	addq %rax,%rdx	  # dest ++
0x1dd: 6003                 | 	addq %rax,%rbx    # src++
0x1df: 30f00100000000000000 | 	irmovq $1,%rax
0x1e9: 6107                 | 	subq %rax,%rdi    # cnt--
0x1eb: 769f01000000000000   | 	jg mcloop
0x1f4:                      | checkpre:
                            | 	# Check for corruption
0x1f4: 30f28002000000000000 | 	irmovq Predest,%rdx
0x1fe: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x208: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x212: 6120                 | 	subq %rdx,%rax
0x214: 733002000000000000   | 	je checkpost
0x21d: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x227: 707602000000000000   | 	jmp cdone
0x230:                      | checkpost:
                            | 	# Check for corruption
0x230: 30f28802000000000000 | 	irmovq Postdest,%rdx
0x23a: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x244: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x24e: 6120                 | 	subq %rdx,%rax
0x250: 736c02000000000000   | 	je checkok
0x259: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x263: 707602000000000000   | 	jmp cdone
0x26c:                      | checkok:
                            | 	# Successful checks
0x26c: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x276:                      | cdone:
0x276: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x278:                      | 	.align 8
0x278:                      | src:
0x278: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x280:                      | 	.align 16
0x280:                      | Predest:
0x280: fadebc0000000000     | 	.quad 0xbcdefa
0x288:                      | dest:
0x288:                      | Postdest:
0x288: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x290:                      | .align 8
                            | # Run time stack
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
                            | 
0x310:                      | Stack:
